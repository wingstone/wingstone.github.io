<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on wingstone's blog</title><link>/tags/c++/</link><description>Recent content in C++ on wingstone's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Sep 2020 14:37:51 +0000</lastBuildDate><atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ Static Usage</title><link>/posts/c-static-usage/</link><pubDate>Mon, 07 Sep 2020 14:37:51 +0000</pubDate><guid>/posts/c-static-usage/</guid><description>C++中的一些细节问题
C语言中的static关键字 修饰全局变量，全局函数 将限制该变量及函数的作用域为本文，不能实现连接时的跨文本使用；
//file1.c static int a = 10; //变量作用范围限制在本文本作用域中 //file2.c #include &amp;lt;iostream&amp;gt; using namespace std; extern int a; //无法使用file1.c中的a变量 int main() { cout &amp;lt;&amp;lt; &amp;quot;a = &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt;endl; return 0; } 修饰局部变量 在用static修饰局部变量后，该变量只在初次运行时进行初始化工作，且只进行一次；且该变量便存放在静态数据区，其生命周期一直持续到整个程序执行结束。
#include&amp;lt;stdio.h&amp;gt; void fun() { static int a=1; a++; } int main(void) { fun(); //这里运行时，a会进行初始化，随后a++ fun(); //这里运行时，只会运行a++ return 0; }</description></item></channel></rss>