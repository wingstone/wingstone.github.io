<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>architecture on wingstone's blog</title><link>/tags/architecture/</link><description>Recent content in architecture on wingstone's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Sep 2020 14:38:33 +0000</lastBuildDate><atom:link href="/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>ECS Architecture</title><link>/posts/ecs-architecture/</link><pubDate>Thu, 10 Sep 2020 14:38:33 +0000</pubDate><guid>/posts/ecs-architecture/</guid><description>ECS架构介绍
ECS架构介绍 ECS ，即 Entity-Component-System（实体-组件-系统） 的缩写，其模式遵循 组合优于继承 原则，游戏内的每一个基本单元都是一个 实体 ，每个 实体 又由一个或多个 组件 构成，每个 组件 仅仅包含代表其特性的 数据（即在组件中没有任何方法） ，系统 便是来处理拥有一个或多个相同组件的实体集合的工具，其只拥有 行为（即在系统中没有任何数据） 。
实体与组件是一个一对多的关系 ，实体拥有怎样的能力，完全是取决于其拥有哪些组件，通过动态添加或删除组件，可以在（游戏）运行时改变实体的行为。
ECS详解 实体 实体是游戏中的一个独特物体，使用一个ID进行表示和标记；
组件 一个组件是一个数据的集合，不存在任何方法；一个经典的实现是使用 继承（或实现）同一个基类（或接口） ，这样就可以在运行时动态的添加和移除；
根据设计需求，有时在全局上下文中只有一个特殊的组件，这种组件一般称之为 Singleton Component（单例组件） ；
系统 系统便是ECS架构中用来 处理游戏逻辑 的部分。一个系统就是对拥有一个或多个相同组件的实体集合进行操作的工具，它只有行为，没有状态，即不存放任何数据。OW差不多拥有上百个系统；
由于代码逻辑分布于各个系统中，各个系统之间为了解耦又不能互相访问，那么如果有多个系统希望运行同样的逻辑，该如何解决，总不能把代码复制 N 份，放到各个系统之中。 UtilityFunction（实用函数） 便是用来解决这一问题的，它将被多个系统调用的方法单独提取出来，放到统一的地方，同系统一样， UtilityFunction 中不能存放状态，它应该是拥有各个方法的纯净集合。
ECS架构优点 性能优势：ECS带来的两大性能优势，就是cache友好，以及易于做多线程并行。 数据与行为分离：修改方便，逻辑清晰； OOP（面向对象）架构 传统的很多游戏引擎是基于 面向对象 来设计的，游戏中的东西都是对象，每个对象有一个叫做 Update 的方法，框架 遍历所有的对象 ，依次调用其 Update 方法。有些引擎甚至定义了多种 Update 方法，在同一帧的不同时机去调用。
Unity引擎的架构 Unity的设计思想为 基于组件 的对象模型；基于组件 的对象模型就是把所有需要提供给游戏对象的基础功能都独立成单独的 组件模块(Component) ，一个具体的游戏对象可以将它需要的功能模块组合到一起使用。所有 功能 不再是父类中的接口，而变成子对象实例，为游戏对象提供服务。</description></item></channel></rss>