<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on wingstone's blog</title><link>/</link><description>Recent content in Home on wingstone's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>center or centroid interpolation</title><link>/posts/2022-07-20-center-or-centroid-interpolation/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>/posts/2022-07-20-center-or-centroid-interpolation/</guid><description>&lt;p>中心插值或质心插值介绍&lt;/p></description></item><item><title>physics simulation</title><link>/posts/2022-07-09-physics-simulation/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>/posts/2022-07-09-physics-simulation/</guid><description>&lt;p>物理模拟相关理论的简单介绍；&lt;/p></description></item><item><title>buildin function in shader</title><link>/posts/2022-06-26-function-in-shader/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/2022-06-26-function-in-shader/</guid><description>&lt;p>关于内置函数的实现方法，发现&lt;a href="https://developer.download.nvidia.cn/cg/index_stdlib.html">Cg Standard Library&lt;/a>写的最好，给出了各种函数的Reference Implementation；实际上，unity查看shader编译后的代码也可以看到对应实现；这里记录几种常见函数的实现方式，从而可以对shader的复杂度有更好的认知；&lt;/p></description></item><item><title>irradiance volumes for games</title><link>/posts/2022-06-23-irradiance-volumes-for-games/</link><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/2022-06-23-irradiance-volumes-for-games/</guid><description>&lt;p>Irradiance Volumes为一种全局光照技术，参考&lt;a href="https://developer.amd.com/wordpress/media/2012/10/Tatarchuk_Irradiance_Volumes.pdf">Irradiance Volumes for Games&lt;/a>，这里记录一下心得体会；&lt;/p></description></item><item><title>imgui</title><link>/posts/2022-06-21-imgui/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/2022-06-21-imgui/</guid><description>&lt;p>记录关于imgui的设计思想总结，关于imgui更全面的介绍，imgui的&lt;a href="https://github.com/ocornut/imgui/wiki">wiki&lt;/a>囊括了非常全面的文档介绍，可以进一步学习；&lt;/p></description></item><item><title>common file operation in python</title><link>/posts/2022-06-02-common-file-operation-in-python/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/2022-06-02-common-file-operation-in-python/</guid><description>&lt;p>由于python处理文件的方便性，记录一些在python中常用的文件操作；&lt;/p></description></item><item><title>using mrt in unity</title><link>/posts/2022-05-28-using-mrt-in-unity/</link><pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022-05-28-using-mrt-in-unity/</guid><description>&lt;p>记录一下在unity中使用mrt的一些方法及问题；&lt;/p></description></item><item><title>Integrate acl to game engine thinking</title><link>/posts/2022-05-14-integrate-acl-to-game-engine-thinking/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022-05-14-integrate-acl-to-game-engine-thinking/</guid><description>&lt;p>记录一下阅读acl unreal plugin，以及将acl集成到游戏引擎中的一些使用心得；&lt;/p></description></item><item><title>Copy control in c++</title><link>/posts/2022-05-09-copy-control-in-c-plus-plus/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022-05-09-copy-control-in-c-plus-plus/</guid><description>&lt;p>Copy control在c++中及其重要，使用不当，会严重影响c++的运行效率；本文总结主要参考C++ primer的第13章节，再加上一些个人的理解；&lt;/p></description></item><item><title>Unity程序化生成插件合集</title><link>/posts/2022-01-30-unity-procedual-generation-plugins/</link><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/2022-01-30-unity-procedual-generation-plugins/</guid><description>&lt;p>这是一个Unity下的程序化生成相关插件的集合，包含了程序化模型生成，程序贴图生成，程序化场景生成等等；可以极大地提升3D开发的效率，同时也便于程序的统一化管理；&lt;/p></description></item><item><title>Mesh Normal Smooth</title><link>/posts/2022-01-22-mesh-normal-smooth/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/2022-01-22-mesh-normal-smooth/</guid><description>&lt;p>Unity平滑法线的一些实现方法；&lt;/p></description></item><item><title>Terrain To Mesh</title><link>/posts/2022-01-22-terrain-to-mesh/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/2022-01-22-terrain-to-mesh/</guid><description>&lt;p>Unity转换Terrain为mesh的简单功能实现；&lt;/p></description></item><item><title>fbx sdk使用总结</title><link>/posts/2022-01-19-fbx-sdk-usage/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/2022-01-19-fbx-sdk-usage/</guid><description>&lt;p>记录使用fbx sdk过程中所踩得一些坑；&lt;/p></description></item><item><title>个人blog构建总结</title><link>/posts/2022-01-12-summary-of-blog-build/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/2022-01-12-summary-of-blog-build/</guid><description>&lt;p>这篇文章记录个人blog的建立经历，包括主要的技术方案汇总，建立过程中遇到的坑点，以及对应的解决方案；&lt;/p></description></item><item><title>Fine Pruned Tiled Light</title><link>/posts/2022-01-04-fine-pruned-tiled-light/</link><pubDate>Tue, 04 Jan 2022 11:43:02 +0800</pubDate><guid>/posts/2022-01-04-fine-pruned-tiled-light/</guid><description>&lt;p>Fptl是基于tiled base lighting而开发出来的更高效的光照计算方法，相比于tbl的光源剔除粒度（tiled级别下的剔除），Fptl可以达到逐像素级别的剔除，从而使光照计算更加高效。&lt;/p></description></item><item><title>Real Shading in Unreal Engine 4</title><link>/posts/2022-01-01-real-shading-in-unreal-engine-4/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/2022-01-01-real-shading-in-unreal-engine-4/</guid><description>&lt;p>本文主要讲述PBR在Unreal中的实现思路，涉及Material Model、Shading Model、Lighting Model的背后原理与经验总结，来自演讲&lt;a href="https://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf">Real Shading in Unreal Engine 4&lt;/a>；在文章最后，添加了我个人的理解与实现细节扩展；&lt;/p></description></item><item><title>Color Space</title><link>/posts/2021-06-26-light-and-color-color-space/</link><pubDate>Sat, 26 Jun 2021 23:14:15 +0000</pubDate><guid>/posts/2021-06-26-light-and-color-color-space/</guid><description>&lt;p>颜色空间作为渲染领域的理论基础，掌握后才能保证渲染显示结果的正确性；这里介绍了基础的颜色空间知识，并介绍一些常用的颜色空间；&lt;/p></description></item><item><title>gamma</title><link>/posts/2021-06-26-light-and-color-gamma/</link><pubDate>Sat, 26 Jun 2021 21:11:24 +0000</pubDate><guid>/posts/2021-06-26-light-and-color-gamma/</guid><description>&lt;p>在图形开发中，总绕不开的一个名词，gamma，这里会对gamma进行一个粗暴但是通俗的讲解，便于理清图形开发中关于gamma的一切；&lt;/p></description></item><item><title>PostProcess关于UV的思考</title><link>/posts/2021-06-10-uv-in-postprocess/</link><pubDate>Thu, 10 Jun 2021 23:47:44 +0000</pubDate><guid>/posts/2021-06-10-uv-in-postprocess/</guid><description>&lt;p>以前一直以为屏幕空间下的UV应该是0-1的范围内的；&lt;/p></description></item><item><title>FXAA(Fast approximate anti-aliasing)</title><link>/posts/2021-03-01-fxaa/</link><pubDate>Mon, 01 Mar 2021 22:52:01 +0000</pubDate><guid>/posts/2021-03-01-fxaa/</guid><description>&lt;p>FXAA是非常方便且高效的抗拒齿方法，本文主要依据FXAA白皮书进行理论介绍&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，然后针对一些实现方法进行探讨&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>；&lt;/p></description></item><item><title>Parallax Mapping（视差贴图）</title><link>/posts/2020-09-30-parallax-mapping/</link><pubDate>Wed, 30 Sep 2020 13:10:15 +0000</pubDate><guid>/posts/2020-09-30-parallax-mapping/</guid><description>&lt;p>视差贴图属于位移贴图(Displacement Mapping)技术的一种，它对根据储存在纹理中的几何信息对顶点进行位移或偏移。一般使用位移贴图之前，需要对模型进行细分（细分着色器），然后进行顶点位移；&lt;/p></description></item><item><title>Preintegrated Subsurface Scattering</title><link>/posts/2020-09-28-preintegrated-subsurface-scattering/</link><pubDate>Mon, 28 Sep 2020 12:18:24 +0000</pubDate><guid>/posts/2020-09-28-preintegrated-subsurface-scattering/</guid><description>&lt;p>预积分皮肤散射主要解决三种皮肤散射情况&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>：&lt;/p>
&lt;ol>
&lt;li>表面弯曲引起的散射（Surface Curvature）；&lt;/li>
&lt;li>表面小凸起引起的散射（Small Surface Bumps）；&lt;/li>
&lt;li>投影边缘引起的散射（Shadows）；&lt;/li>
&lt;/ol></description></item><item><title>移动GPU架构</title><link>/posts/2020-09-17-mobile-gpu-architecture/</link><pubDate>Thu, 17 Sep 2020 13:30:09 +0000</pubDate><guid>/posts/2020-09-17-mobile-gpu-architecture/</guid><description>&lt;p>移动GPU架构经常被称之为TBR（Tiled Based Rendering），我们这里也以TBR代称，有时也会称之为TBDR；&lt;/p></description></item><item><title>头发渲染——Kajiya model</title><link>/posts/2020-09-16-kajiya-model/</link><pubDate>Wed, 16 Sep 2020 12:19:32 +0000</pubDate><guid>/posts/2020-09-16-kajiya-model/</guid><description>&lt;p>关键点：采用多边形建模，进行深度排序修正渲染顺序（因为半透问题），AO去模拟自阴影，两层高光，采用Tangent向量代替N进行高光计算；&lt;/p></description></item><item><title>Computer Graphics Resources</title><link>/posts/2020-09-15-computer-graphics-resources/</link><pubDate>Tue, 15 Sep 2020 16:10:15 +0000</pubDate><guid>/posts/2020-09-15-computer-graphics-resources/</guid><description>&lt;p>图形学学习资源推荐，包含了学习网站，学习书记，开源项目等等；&lt;/p></description></item><item><title>Pipeline——Rendering Path（渲染路径）</title><link>/posts/2020-09-14-rendering-path/</link><pubDate>Mon, 14 Sep 2020 14:51:39 +0000</pubDate><guid>/posts/2020-09-14-rendering-path/</guid><description>&lt;p>Rendering Path主要用来指光照计算上的处理方式等；常见的有Forward/Deferred Rendering；以及其改版Forward+、Tiled Based Deferred Rendering、Clustered Shading；&lt;/p></description></item><item><title>Pipeline——GPU Graphic Pipeline（图形管线）</title><link>/posts/2020-09-13-gpu-graphic-pipeline/</link><pubDate>Sun, 13 Sep 2020 09:14:06 +0000</pubDate><guid>/posts/2020-09-13-gpu-graphic-pipeline/</guid><description>&lt;p>所谓管线就是一个流程，针对硬件来说，处理一个图元有一个硬件渲染流程&lt;strong>Graphic Pipeline（图形管线）&lt;/strong>；Graphic Pipeline位于非常低级的渲染层次，是渲染一个物体必走的渲染流程；&lt;/p></description></item><item><title>Opengl Vertex Interpolation</title><link>/posts/2020-09-10-opengl-vertex-interpolation/</link><pubDate>Thu, 10 Sep 2020 14:39:18 +0000</pubDate><guid>/posts/2020-09-10-opengl-vertex-interpolation/</guid><description>&lt;p>OpenGL中关于插值问题&lt;/p></description></item><item><title>C++ Static Usage</title><link>/posts/2020-09-07-c-static-usage/</link><pubDate>Mon, 07 Sep 2020 14:37:51 +0000</pubDate><guid>/posts/2020-09-07-c-static-usage/</guid><description>&lt;p>C++中的static关键字的一些使用细节问题&lt;/p></description></item><item><title>Combination and Permutation（排列与组合）</title><link>/posts/2020-09-07-combination-and-permutation/</link><pubDate>Mon, 07 Sep 2020 14:37:00 +0000</pubDate><guid>/posts/2020-09-07-combination-and-permutation/</guid><description>&lt;p>关于排列与组合的算法问题&lt;/p></description></item><item><title>Monte Carlo Integration</title><link>/posts/2020-09-06-monte-carlo-integration/</link><pubDate>Sun, 06 Sep 2020 14:35:52 +0000</pubDate><guid>/posts/2020-09-06-monte-carlo-integration/</guid><description>&lt;p>蒙特卡洛积分的简短介绍，以及PBRT中常用的函数分布；&lt;/p></description></item><item><title>Mathematics about camera in graphics（图形学中关于相机的数学）</title><link>/posts/2020-06-18-mathematics-about-camera-in-3d-game-engine/</link><pubDate>Thu, 18 Jun 2020 14:34:51 +0000</pubDate><guid>/posts/2020-06-18-mathematics-about-camera-in-3d-game-engine/</guid><description>&lt;p>以OpenGL中的右手坐标系为例，介绍引擎中和各种应用中跟相机有关的数学；&lt;/p></description></item><item><title>Unity Useful Plugins And Projects</title><link>/posts/2020-03-29-unity-useful-plugins-and-projects/</link><pubDate>Sun, 29 Mar 2020 14:33:26 +0000</pubDate><guid>/posts/2020-03-29-unity-useful-plugins-and-projects/</guid><description>&lt;p>这是一个插件集合的列表，主要用来存储我在学习unity过程中使用到的非常好用的插件，或者一些不错的工程；本着通用和好用的要求，这里的插件都是一些基本功能的整合；&lt;/p></description></item><item><title>ShaderToy MultiParticle Rendering</title><link>/posts/2020-01-11-shadertoy-multiparticle-rendering/</link><pubDate>Sat, 11 Jan 2020 14:31:41 +0000</pubDate><guid>/posts/2020-01-11-shadertoy-multiparticle-rendering/</guid><description>&lt;p>在ShaderToy开发过程中，使用粒子可以极高的提升粒子效果，绘制粒子可以分为&lt;strong>粒子着色&lt;/strong>以及&lt;strong>粒子范围的确定&lt;/strong>两部分，这篇文章主要讨论&lt;strong>粒子范围的确定&lt;/strong>。&lt;/p></description></item><item><title>ShaderToy Bloom Effect</title><link>/posts/2020-01-11-shadertoy-bloom-effect/</link><pubDate>Sat, 11 Jan 2020 14:29:03 +0000</pubDate><guid>/posts/2020-01-11-shadertoy-bloom-effect/</guid><description>&lt;p>简单bloom效果的实现，在已知距离场的情况下，使用距离的倒数以及指数函数来模拟bloom的效果；&lt;/p></description></item><item><title>About</title><link>/about/</link><pubDate>Wed, 01 Jan 2020 11:07:14 +0800</pubDate><guid>/about/</guid><description>网站建立经历 阶段一： 之前曾使用jekyll来建立个人网站，后来因为配置jekyll要配置ruby环境，且配置主题经常出问题，以至于blog经常显示出问题；
于是第一次建立个人网站就这样被搁置一旁，不了了之；转向了CSDN，知乎这些写作平台；
阶段二： 第二次建立个人网站是借助Gridea，不得不说，Gridea设计的初衷是非常好的；通过集成整个博客开发及部署流程，使得Gridea非常的简单好用，而且免费提供的主题也非常的优美，于是使用Gridea开发了一段时间；
后来使用Gridea的过程中发现小bug略多，有两个个重要的问题没解决：
经常网站push不成功； 不能pull工作进度，以至于不能多端工作； 后来发现Gridea已经不维护了，遂放弃Gridea，转向了CSDN，知乎这些写作平台；
阶段三： 后来觉得在这些博客平台写作还是不合适，内容自己不会经常维护，感觉写了之后就不像是自己的东西了；
于是开始了解其他的建站工具，这时接触到hugo，hugo是真的好用；
首先配置简单：直接下载程序，配置环境变量即可；
再者是开源主题更加丰富，且主题配置简单，主题与网站文件几乎没有耦合；
最重要的一点是，通过搭建两个仓库就可以实现自动部署以及多端工作的功能！于是就出现了现在这个博客网站的样子~
个人简介 我英文名叫wingstone，于是网名就沿用了中文翻译风石这个名字；
本科毕业于东南大学，硕士毕业于浙江大学，毕业后在网易任职技术美术，目前在字节跳动担任游戏引擎开发；
我本人不是计算机专业，但是酷爱计算机图形学，于是毕业后转行来到了游戏行业，目前仍在专心修炼中；
这里将作为我潜修图形学知识的仓库，欢迎有兴趣的有志之士一同交流图形学知识~
联系方式 QQ：1812467051
WeChat：1812467051</description></item><item><title>Archives</title><link>/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/archives/</guid><description/></item></channel></rss>